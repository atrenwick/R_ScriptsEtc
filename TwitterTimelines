library(dplyr); library(tidyr) ; library(rtweet); library(tidytext) ; library(beepr) ## load libraries


## Authenticate : Enter your twitterAPI credentials
{ twitterapp_keylist <- list(
  api_key = "",
  api_secret = "",
  access_token = "",
  access_secret = "",
  bearer_token = ""
)
  my_token1 <- create_token(
    app = "myAppName", # the name of my app <––––––– Add a name for your app
    consumer_key = twitterapp_keylist$api_key,
    consumer_secret = twitterapp_keylist$api_secret,
    access_token = twitterapp_keylist$access_token,
    access_secret = twitterapp_keylist$access_secret
  )
}
## Authenticate : option to add additional API keys if possessed; the following section is deactivated (select whole section and Command + C to de-comment)

# rm(my_token1, twitterapp_keylist)
# {
#  twitterapp_keylist <- list(
#   api_key = "",
#   api_secret = "",
#   access_token = "",
#   access_secret = "",
#   bearer_token = ""
# )
#   my_token1 <- create_token(
#    app = "myAppName", # the name of my app <––––––– Add a name for your app
#     consumer_key = twitterapp_keylist$api_key,
#     consumer_secret = twitterapp_keylist$api_secret,
#     access_token = twitterapp_keylist$access_token,
#     access_secret = twitterapp_keylist$access_secret
#   )
# }



TLsV2 <- read.csv("/Users/me/Downloads/Tweets/TLsV2.csv", header = T) # import list of TwitterIDs built from identifying accounts of interest; this file is TLsV2, timelines, version 2.
TLsV2$screen_name <- gsub("@", "", TLsV2$Handle) # remove the @ from the contents of the column 'Handle' and put this into the column 'screen_name
thisYear <- format(Sys.Date(), "%Y") # get Year from current date
YesterdayMonth <- format(Sys.Date(), "%m") # get month from current date
#YesterdayMonth <- as.integer(YesterdayMonth) -1 # special line to run on 1st of month to get number of previous day which is in previous month
#YesterdayMonth <-paste("0", YesterdayMonth, sep="") # special line add 0 to previous month obtained from previous line
#YesterDate <- 30 # set number of days in previous month
thisDay <- as.numeric(format(Sys.Date(), "%d")) # get day
if ((thisDay <10)){
  thisDay <- paste(0,thisDay, sep = "")} # if day is less than 10, put a 0 in front of it
YesterDate <- as.numeric(thisDay) -1 # subtract 1 from today's date to get yesterday's
if ((YesterDate <10)){
  YesterDate <- paste(0,YesterDate, sep = "")} # add a 0 in front of yesterday's date if it's less than 10
YesterdayYMDString <- paste(thisYear, YesterdayMonth, YesterDate, sep="-") # create a string of yesterdays YYYY-MM-DD
DailyPath <-  paste("/Users/me/Downloads/Tweets/Timelines/", thisYear, "/", YesterdayYMDString, sep="") # set name of target folder to path specified + yesterdays date as string
#ifelse( !dir.exists(file.path(DailyPath)),   dir.create(file.path(DailyPath)),   FALSE  ) # if folder doesn't exist, create it, otherwise, do nothing


## Get - Section that actually gets timelines
{
currentOutput <- data.frame()
for (i in 1:9){
  currentFeed <- get_timeline(TLsV2$Handle[i], n = 1000, token = my_token1) # gets the 1000 most recent tweets in timeline for handle specified, using token specified
  currentFeed <- currentFeed[-c(1,6:10,13:90)] # remove unwanted columns
  allCurrentInfo <- right_join(currentFeed, TLsV2, by = "screen_name") %>% 
      na.omit(text)  # join columns from input list to newly harvested timeline
  allCurrentInfo<- allCurrentInfo[-c(7,8,10)]   # remove now unneeded columns (including screen_name)
  allCurrentInfo <- allCurrentInfo[which(allCurrentInfo$is_quote == F),] ## get rid of quotes and retweets
  allCurrentInfo <- allCurrentInfo[which(allCurrentInfo$is_retweet == F),] # delete retweets
  allCurrentInfo <- allCurrentInfo[-c(5,6)] # remove columns 5 and 6
  allCurrentInfo <- unique.data.frame(allCurrentInfo) # create a unique dataframe (i.e. remove all duplicates)
  currentOutput <- rbind(currentOutput, allCurrentInfo) # bind these uniquedataframes together
  cat ("Completed", i, TLsV2$Handle[i], ";", dim(allCurrentInfo)[1], "added", "total :", dim(currentOutput)[1], "\n") # print message specifying number, name of twitter account just processed, and number of tweets added from this account, and total tweets added thus far
}
## suppose that these accounts all share one property, eg. being from Belgium-based accounts
{
BE_TML <- currentOutput # create new df with processed timelines
BE_TML <- separate(BE_TML, created_at, c("Date", "Time"), sep= " ") # split the date created column into two columns, one for date, and one for time
BE_TML <- separate(BE_TML, Date, c("YYYY", "MM", "DD"), sep= "-") # split the date column into YYYY, MM and DD columns
BE_TML <- separate(BE_TML, Time, c("hh", "mm", "ss"), sep= ":") # separate the time column into hours, minutes and seconds
BE_TML <- BE_TML[which(BE_TML$YYYY == thisYear), ] # keep only tweets from the current year
BE_TML <- BE_TML[which(BE_TML$MM == YesterdayMonth), ] # keep only tweets from the month that yesterday was part of
BE_TML <- BE_TML[which(BE_TML$DD == YesterDate), ] # keep only tweets from yesterday
BE_TML <- unique.data.frame(BE_TML) # remove any duplicates
write.csv(BE_TML, paste(DailyPath, "-BE_TML.csv", sep="")) # write this to file as csv


}
}
# ## this code from lines 61 - 86 repeats for subsequent sections of tweets, from subsequent groups of twitter accounts, say France-based, Luxembourg-based, Switzerland-based, Canada-based French language accounts. 
# as these repeat the above functionality, they are not commented. COmments resume from line 179, once all timelines have been gathered.

{
currentOutput <- data.frame() # clear dataframe 'currentOutput' as its contents have been saved to the BE_TML dataframe.
for (i in 10:19){
  currentFeed <- get_timeline(TLsV2$Handle[i], n = 1000, token = my_token1)
  currentFeed <- currentFeed[-c(1,6:10,13:90)]
  allCurrentInfo <- right_join(currentFeed, TLsV2, by = "screen_name") %>% 
      na.omit(text) 
  allCurrentInfo<- allCurrentInfo[-c(7,8,10)]  
  allCurrentInfo <- allCurrentInfo[which(allCurrentInfo$is_quote == F),] ## get rid of quotes and retweets
  allCurrentInfo <- allCurrentInfo[which(allCurrentInfo$is_retweet == F),]
  allCurrentInfo <- allCurrentInfo[-c(5,6)]
  allCurrentInfo <- unique.data.frame(allCurrentInfo)
  currentOutput <- rbind(currentOutput, allCurrentInfo)
  cat ("Completed", i,  TLsV2$Handle[i], ";", dim(allCurrentInfo)[1], "added", "total :", dim(currentOutput)[1], "\n" )
}
{
CA_TML <- currentOutput
CA_TML <- separate(CA_TML, created_at, c("Date", "Time"), sep= " ")
CA_TML <- separate(CA_TML, Date, c("YYYY", "MM", "DD"), sep= "-")
CA_TML <- separate(CA_TML, Time, c("hh", "mm", "ss"), sep= ":")
CA_TML <- CA_TML[which(CA_TML$YYYY == thisYear), ]
CA_TML <- CA_TML[which(CA_TML$MM == YesterdayMonth), ]
CA_TML <- CA_TML[which(CA_TML$DD == YesterDate), ]
CA_TML <- unique.data.frame(CA_TML)
write.csv(CA_TML, paste(DailyPath, "-CA_TML.csv", sep=""))
}
}
{
currentOutput <- data.frame()
for (i in 20:29){
  currentFeed <- get_timeline(TLsV2$Handle[i], n = 1000, token = my_token1)
  currentFeed <- currentFeed[-c(1,6:10,13:90)]
  allCurrentInfo <- right_join(currentFeed, TLsV2, by = "screen_name") %>% 
    na.omit(text) 
  allCurrentInfo<- allCurrentInfo[-c(7,8,10)]  
  allCurrentInfo <- allCurrentInfo[which(allCurrentInfo$is_quote == F),] ## get rid of quotes and retweets
  allCurrentInfo <- allCurrentInfo[which(allCurrentInfo$is_retweet == F),]
  allCurrentInfo <- allCurrentInfo[-c(5,6)]
  allCurrentInfo <- unique.data.frame(allCurrentInfo)
  currentOutput <- rbind(currentOutput, allCurrentInfo)
  cat ("Completed", i,  TLsV2$Handle[i], ";", dim(allCurrentInfo)[1], "added", "total :", dim(currentOutput)[1], "\n")
}
{
CH_TML <- currentOutput
CH_TML <- separate(CH_TML, created_at, c("Date", "Time"), sep= " ")
CH_TML <- separate(CH_TML, Date, c("YYYY", "MM", "DD"), sep= "-")
CH_TML <- separate(CH_TML, Time, c("hh", "mm", "ss"), sep= ":")

CH_TML <- CH_TML[which(CH_TML$YYYY == thisYear), ]
CH_TML <- CH_TML[which(CH_TML$MM == YesterdayMonth), ]
CH_TML <- CH_TML[which(CH_TML$DD == YesterDate), ]
CH_TML <- unique.data.frame(CH_TML)
write.csv(CH_TML, paste(DailyPath, "-CH_TML.csv", sep=""))

}
}
{
currentOutput <- data.frame() ## change to 54:93
for (i in 30:39){
  currentFeed <- get_timeline(TLsV2$Handle[95], n = 1000, token = my_token1)
  currentFeed <- currentFeed[-c(1,6:10,13:90)]
  allCurrentInfo <- right_join(currentFeed, TLsV2, by = "screen_name") %>% 
    na.omit(text) 
  allCurrentInfo<- allCurrentInfo[-c(7,8,10,10)]  
  allCurrentInfo <- allCurrentInfo[which(allCurrentInfo$is_quote == F),] ## get rid of quotes and retweets
  allCurrentInfo <- allCurrentInfo[which(allCurrentInfo$is_retweet == F),]
  allCurrentInfo <- allCurrentInfo[-c(5,6)]
  allCurrentInfo <- unique.data.frame(allCurrentInfo)
  currentOutput <- rbind(currentOutput, allCurrentInfo)
  cat ("Completed", i, TLsV2$Handle[i], "+", dim(allCurrentInfo)[1], "->", dim(currentOutput)[1], "\n")
}
}

{
LX_TML <- currentOutput
LX_TML <- separate(LX_TML, created_at, c("Date", "Time"), sep= " ")
LX_TML <- separate(LX_TML, Date, c("YYYY", "MM", "DD"), sep= "-")
LX_TML <- separate(LX_TML, Time, c("hh", "mm", "ss"), sep= ":")

LX_TML <- LX_TML[which(LX_TML$YYYY == thisYear), ]
LX_TML <- LX_TML[which(LX_TML$MM == YesterdayMonth), ]
LX_TML <- LX_TML[which(LX_TML$DD == YesterDate), ]
LX_TML <- unique.data.frame(LX_TML)

write.csv(LX_TML, paste(DailyPath, "-LX_TML.csv", sep=""))
}

#####

outputPathLevel1 <- paste("/Users/me/Downloads/Tweets/Timelines/", thisYear, "/", sep="")
outputPathLevel2 <- paste(outputPathLevel1, thisYear,  "-", YesterdayMonth, "/", sep="")
outputPathLevel3 <- paste(outputPathLevel2, thisYear,  "-", YesterdayMonth, "-", YesterDate, "/", sep="")
## set names for 3 folders in a hierarchy, one folder for year, which contains folder for month, which contains a folder for the day
ifelse( !dir.exists(file.path(outputPathLevel1)),   dir.create(file.path(outputPathLevel1)),   FALSE  )
ifelse( !dir.exists(file.path(outputPathLevel2)),   dir.create(file.path(outputPathLevel2)),   FALSE  )
ifelse( !dir.exists(file.path(outputPathLevel3)),   dir.create(file.path(outputPathLevel3)),   FALSE  )
# test to see if the year folder exists. if it does, do nothing, if it doesn't, create it. the do same for month, then day.

currentSelection <- rbind(BE_TML, CA_TML, CH_TML, FR_TML, LX_TML) # combine processed timelines into one df
currentSelection$text <- gsub("http.+", "", currentSelection$text) # remove URLs from tweets
currentSelection$text <- gsub("#.+? ", "", currentSelection$text) # remove hashtags
currentSelection$text <- gsub("@.+? ", "", currentSelection$text) # remove twitter handles
currentSelection$text <-   gsub("\'|’", "\' ", currentSelection$text) ## space elisions 
currentSelection$text <-   gsub("  ", " ", currentSelection$text) ## remove double spaces
currentSelection$text <-   gsub("_", "", currentSelection$text) ## remove double spaces
currentSelection$text <-   gsub("-|–", "-", currentSelection$text) ## remove double spaces
currentSelection$text <-   gsub("[\"“‘«]", "\"", currentSelection$text) # reokace opening quote variations with std double "
currentSelection$text <-   gsub("[”’»]", "\"", currentSelection$text) # idem for closing
currentSelection$text <- gsub("[0-9]+", "", currentSelection$text) # remove numebrs
currentSelection$text <- gsub(",", "", currentSelection$text) # remove commas
currentSelection$text <- gsub("\\.", "", currentSelection$text) # remove fullstops/periods
currentSelection$text <- gsub("tco.*ing.", "", currentSelection$text) # remove twitter shortlinks

## run the next section after consideration of the size of the dataframe : it will print each tweet to a separate file. Modern operating systems sometimes don't react well to the appearance of, or scrolling through, hundreds of thousands of files, so use caution.

for (i in 1:dim(currentSelection)[1]){
currentTweetContent <- currentSelection$text[i] # for each row of the dataframe, get the contents of the tweet
currrentTweetID <- currentSelection$status_id[i] # and get the tweetID
FullName <- paste(outputPathLevel3, currrentTweetID, ".txt", sep="") # use the tweetID as the of the file
writeChar(currentTweetContent, FullName) # write the contents of the tweet to a file in the folder for the day in question, filename = tweet ID
}
beep(2) # beep twice on completion
